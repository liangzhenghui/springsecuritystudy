<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd"
	default-autowire="byName" default-lazy-init="true">
	<!-- 
		如果目标对象实现了接口 默认情况下会使用动态代理实现AOP,也可以强制使用CGLIB
		1)加入 CGLIB库
		2)在配置文件中加入<aop:aspectj-autoproxy proxy-target-class="true"/>
		如果目标对象没有实现接口，就必须使用GCLIB,Spring 会自动在动态代理和CGLIB之间转换。
		JDK动态代理和CGLIB的区别是
		JDK动态代理只能是对实现了接口的类生产代理
		CGLIB是针对类来生产代理，机制就是生产了一个子类，这个子类就是代理类，覆盖方法，因为是继承，所以属性和方法最好不要声明称final
	 -->
	<!-- 支持 @AspectJ 标记-->
	<aop:aspectj-autoproxy />
	<!-- 以AspectJ方式 定义 AOP -->
	<aop:config proxy-target-class="true">
		<!-- 注意,请把第2个*号换为项目package -->
		<aop:advisor
			pointcut="execution(* service.*Service.*(..))"
			advice-ref="jdbcTxAdvice" />
	</aop:config>
	
	<!-- 基本事务定义,使用transactionManager作事务管理,默认get*方法的事务为readonly,其余方法按默认设置.
		默认的设置请参考Spring文档事务一章. -->
	<!-- 
	propagation="SUPPORTS"
		Indicates that the current method does not require a
		transactional context, but may run within a transaction if one is
		already in progress.
	 -->
	<tx:advice id="jdbcTxAdvice"
		transaction-manager="jdbcTransactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="createUserTestWithoutTransaction" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<bean id="jdbcTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>	
</beans>
